package br.gaveteiro.senai.controller;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.gaveteiro.senai.dao.MudancaStatusDao;
import br.gaveteiro.senai.dao.PedidoDao;
import br.gaveteiro.senai.dao.StatusDao;
import br.gaveteiro.senai.dao.UsuarioDao;
import br.gaveteiro.senai.modelo.Pedido;
import br.gaveteiro.senai.modelo.Status;
import br.gaveteiro.senai.modelo.Usuario;
@CrossOrigin
@RestController
public class PedidoRestController {
	@Autowired
	private PedidoDao pedidoDao;
	@Autowired
	private MudancaStatusDao mudancaStatusDao;
	@Autowired
	private StatusDao statusDao;
	@Autowired
	private UsuarioDao usuarioDao;
	
	
	@RequestMapping(value = "/pedido/{idPedido}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<Pedido> listar(@PathVariable Long idPedido) {
		try {
			Pedido pedido = pedidoDao.listar(idPedido);
			return ResponseEntity.ok(pedido);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	@RequestMapping(value = "/pedido", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public List<Pedido> listar(@RequestParam(name="empresa", defaultValue = "false") String empresa, @RequestParam(name="status", defaultValue = "") String status ) {
		if(empresa.isEmpty() && status.isEmpty())
			return pedidoDao.listar();
		else if(!empresa.isEmpty() && status.isEmpty())
			return pedidoDao.listarPorRazaoSocial(empresa);
		else if(!status.isEmpty() && empresa.isEmpty())
		{
			Long idStatus = Long.parseLong(status);
			Status s = statusDao.listar(idStatus);
			return pedidoDao.listarPorStatus(s);
		}
	}

	@RequestMapping(value = "empresa/{idEmpresa}/pedido", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<List<Pedido>> listarPorEmpresa(@PathVariable Long idEmpresa, @RequestParam(name="ultimo", defaultValue = "false") String ultimo) {
		System.out.println(ultimo);
		if(ultimo.equals("false"))
			return ResponseEntity.ok(pedidoDao.listarPorEmpresa(idEmpresa));
		else {
			System.out.println("passei aqui");
			if(pedidoDao.listarUltimo(idEmpresa) != null)
				return ResponseEntity.ok(pedidoDao.listarUltimo(idEmpresa));
			else
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	
	

	@RequestMapping(value = "/pedido/{idPedido}/status/{idStatus}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<Void> alterarStatus(@PathVariable Long idPedido,  @PathVariable Long idStatus,@RequestBody Usuario u)
	{
		try {
					
			System.out.println("id usuario "+u.getIdUsuario()+"\nid status "+idStatus);
			Status status = statusDao.listar(idStatus);
			if(status != null)
			{
				Pedido pedido = pedidoDao.alterarStatus(idPedido, status);
				u = usuarioDao.listar(u.getIdUsuario());
				mudancaStatusDao.atualizarStatus(pedido, u);
				HttpHeaders responseHeaders = new HttpHeaders();
				URI location = new URI("/pedido/"+idPedido);
				responseHeaders.setLocation(location);
				return new ResponseEntity<>(responseHeaders, HttpStatus.OK);
			} else {
				return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
			}

		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	
}
