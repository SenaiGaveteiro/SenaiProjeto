package br.gaveteiro.senai.dao;

import java.util.Calendar;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import br.gaveteiro.senai.modelo.Pedido;
import br.gaveteiro.senai.modelo.Status;

@Repository
public class PedidoDao {
	@PersistenceContext
	private EntityManager manager;
	public Pedido listar(Long idPedido)
	{
		return manager.find(Pedido.class, idPedido);
	}
	
	public List<Pedido> listar()
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p", Pedido.class);
		return query.getResultList();
	}
	
	public List<Pedido> listarPorEmpresa(Long idEmpresa)
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p where p.empresa.idEmpresa = :idEmpresa", Pedido.class);
		query.setParameter("idEmpresa", idEmpresa);
		return query.getResultList();
	}
	
	public List<Pedido> listarPorEmpresa(Long idEmpresa, Status status)
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p where p.empresa.idEmpresa = :idEmpresa and p.status.idStatus = :idStatus", Pedido.class);
		query.setParameter("idEmpresa", idEmpresa);
		query.setParameter("idStatus", status.getIdStatus());
		return query.getResultList();
	}
	
	public List<Pedido> listarPorRazaoSocial(String razaoSocial)
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p where p.empresa.razaoSocial = :razaoSocial", Pedido.class);
		query.setParameter("razaoSocial", razaoSocial);
		return query.getResultList();
	}
	
	public List<Pedido> listarPorRazaoSocial(String razaoSocial, Status status)
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p where p.empresa.razaoSocial = :razaoSocial and p.status.idStatus = :id", Pedido.class);
		query.setParameter("razaoSocial", razaoSocial);
		query.setParameter(":id", status.getIdStatus());
		return query.getResultList();
	}
	
	public List<Pedido> listarPorStatus(Status status)
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p where p.status.idStatus = :id", Pedido.class);
		query.setParameter("id", status.getIdStatus());
		return query.getResultList();
	}
	
	@Transactional
	public Pedido alterarStatus(Long idPedido, Status status)
	{
		Calendar ultimaAtualizacao = Calendar.getInstance();
		ultimaAtualizacao.getTime();
		Pedido pedido = manager.find(Pedido.class, idPedido);
		pedido.setStatus(status);
		pedido.setUltimaAtualizacao(ultimaAtualizacao);
		manager.merge(pedido);

		return pedido;
	}
	
	public List<Pedido> listarUltimo(Long idEmpresa)
	{
		TypedQuery<Pedido> query = manager.createQuery("select p From Pedido p where p.empresa.idEmpresa = :idEmpresa order by p.idPedido desc", Pedido.class);
		query.setParameter("idEmpresa", idEmpresa);
		query.setMaxResults(1);
		return query.getResultList();
	}
}
